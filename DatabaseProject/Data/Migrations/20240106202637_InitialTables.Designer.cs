// <auto-generated />
using System;
using DatabaseProject.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DatabaseProject.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240106202637_InitialTables")]
    partial class InitialTables
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.24")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("DatabaseProject.Data.Models.Author", b =>
                {
                    b.Property<string>("AuthorId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("author_id");

                    b.Property<short?>("AuthorAge")
                        .HasColumnType("smallint")
                        .HasColumnName("author_age");

                    b.Property<string>("AuthorName")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("author_name");

                    b.Property<string>("AuthorSurname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("author_surname");

                    b.HasKey("AuthorId");

                    b.ToTable("authors", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.CoSupervisor", b =>
                {
                    b.Property<string>("CoSupervisorId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("co_sup_id");

                    b.Property<short>("CoSupervisorAge")
                        .HasColumnType("smallint")
                        .HasColumnName("co_sup_age");

                    b.Property<string>("CoSupervisorName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("co_sup_name");

                    b.Property<string>("CoSupervisorSurname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("co_sup_surname");

                    b.HasKey("CoSupervisorId")
                        .HasName("PK__co_super__CB64971F52E984BA");

                    b.ToTable("co_supervisors", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Institute", b =>
                {
                    b.Property<int>("InstituteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ins_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("InstituteId"), 1L, 1);

                    b.Property<string>("InstituteName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("ins_name");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int")
                        .HasColumnName("uni_id");

                    b.HasKey("InstituteId")
                        .HasName("PK__institut__9CB72D20BE7905B8");

                    b.HasIndex("UniversityId");

                    b.ToTable("institutes", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Keyword", b =>
                {
                    b.Property<int>("KeywordId")
                        .HasColumnType("int")
                        .HasColumnName("key_id");

                    b.Property<string>("KeywordName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("key_name");

                    b.Property<int?>("ThesisNo")
                        .HasColumnType("int")
                        .HasColumnName("thesis_no");

                    b.HasKey("KeywordId")
                        .HasName("PK__keywords__97DF9ACD6DA19E79");

                    b.HasIndex("ThesisNo");

                    b.ToTable("keywords", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.SubjectTopic", b =>
                {
                    b.Property<int>("SubjectTopicId")
                        .HasColumnType("int")
                        .HasColumnName("st_id");

                    b.Property<string>("SubjectTopicName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("st_name");

                    b.HasKey("SubjectTopicId")
                        .HasName("PK__subject___A85E81CF42660A42");

                    b.ToTable("subject_topics", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Supervisor", b =>
                {
                    b.Property<string>("SupervisorId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("sup_id");

                    b.Property<short?>("SupervisorAge")
                        .HasColumnType("smallint")
                        .HasColumnName("sup_age");

                    b.Property<string>("SupervisorName")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sup_name");

                    b.Property<string>("SupervisorSurname")
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("sup_surname");

                    b.HasKey("SupervisorId")
                        .HasName("PK__supervis__FB8F785F52102143");

                    b.ToTable("supervisors", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Thesis", b =>
                {
                    b.Property<int>("ThesisNo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("thesis_no");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ThesisNo"), 1L, 1);

                    b.Property<string>("Abstract")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("abstract");

                    b.Property<string>("AuthorId")
                        .IsRequired()
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("author_id");

                    b.Property<string>("CoSupervisorId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("co_sup_id");

                    b.Property<int>("InstitueId")
                        .HasColumnType("int")
                        .HasColumnName("ins_id");

                    b.Property<string>("Language")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("language");

                    b.Property<int>("NumPages")
                        .HasColumnType("int")
                        .HasColumnName("num_pages");

                    b.Property<DateTime>("SubmissionDate")
                        .HasColumnType("date")
                        .HasColumnName("submission_date");

                    b.Property<string>("SupervisorId")
                        .HasMaxLength(11)
                        .IsUnicode(false)
                        .HasColumnType("varchar(11)")
                        .HasColumnName("sup_id");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(500)
                        .IsUnicode(false)
                        .HasColumnType("varchar(500)")
                        .HasColumnName("title");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("type");

                    b.Property<int>("UniversityId")
                        .HasColumnType("int")
                        .HasColumnName("uni_id");

                    b.HasKey("ThesisNo")
                        .HasName("PK__thesis__50ACADFD0B7433F7");

                    b.HasIndex("AuthorId");

                    b.HasIndex("CoSupervisorId");

                    b.HasIndex("InstitueId");

                    b.HasIndex("SupervisorId");

                    b.HasIndex("UniversityId");

                    b.ToTable("thesis", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.TSubject", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("SubjectTopicId")
                        .HasColumnType("int")
                        .HasColumnName("st_id");

                    b.Property<int?>("ThesisNo")
                        .HasColumnType("int")
                        .HasColumnName("thesis_no");

                    b.HasKey("Id");

                    b.HasIndex("SubjectTopicId");

                    b.HasIndex("ThesisNo");

                    b.ToTable("t_subjects", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.University", b =>
                {
                    b.Property<int>("UniversityId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("uni_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UniversityId"), 1L, 1);

                    b.Property<string>("UniversityAddress")
                        .IsRequired()
                        .HasMaxLength(60)
                        .IsUnicode(false)
                        .HasColumnType("varchar(60)")
                        .HasColumnName("uni_address");

                    b.Property<string>("UniversityName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("uni_name");

                    b.HasKey("UniversityId")
                        .HasName("PK__universi__5D928CDE0B495EF1");

                    b.ToTable("university", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Institute", b =>
                {
                    b.HasOne("DatabaseProject.Data.Models.University", "University")
                        .WithMany("Institutes")
                        .HasForeignKey("UniversityId")
                        .IsRequired()
                        .HasConstraintName("FK__institute__uni_i__7F2BE32F");

                    b.Navigation("University");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Keyword", b =>
                {
                    b.HasOne("DatabaseProject.Data.Models.Thesis", "Thesis")
                        .WithMany("Keywords")
                        .HasForeignKey("ThesisNo")
                        .HasConstraintName("FK__keywords__thesis__0A9D95DB");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Thesis", b =>
                {
                    b.HasOne("DatabaseProject.Data.Models.Author", "Author")
                        .WithMany("Theses")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK__thesis__author_i__03F0984C");

                    b.HasOne("DatabaseProject.Data.Models.CoSupervisor", "CoSupervisor")
                        .WithMany("Theses")
                        .HasForeignKey("CoSupervisorId")
                        .HasConstraintName("FK__thesis__co_sup_i__07C12930");

                    b.HasOne("DatabaseProject.Data.Models.Institute", "Institute")
                        .WithMany("Theses")
                        .HasForeignKey("InstitueId")
                        .IsRequired()
                        .HasConstraintName("FK__thesis__ins_id__05D8E0BE");

                    b.HasOne("DatabaseProject.Data.Models.Supervisor", "Supervisor")
                        .WithMany("Theses")
                        .HasForeignKey("SupervisorId")
                        .HasConstraintName("FK__thesis__sup_id__06CD04F7");

                    b.HasOne("DatabaseProject.Data.Models.University", "University")
                        .WithMany("Theses")
                        .HasForeignKey("UniversityId")
                        .IsRequired()
                        .HasConstraintName("FK__thesis__uni_id__04E4BC85");

                    b.Navigation("Author");

                    b.Navigation("CoSupervisor");

                    b.Navigation("Institute");

                    b.Navigation("Supervisor");

                    b.Navigation("University");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.TSubject", b =>
                {
                    b.HasOne("DatabaseProject.Data.Models.SubjectTopic", "SubjectTopic")
                        .WithMany("TSubjects")
                        .HasForeignKey("SubjectTopicId")
                        .HasConstraintName("FK__t_subject__st_id__10566F31");

                    b.HasOne("DatabaseProject.Data.Models.Thesis", "Thesis")
                        .WithMany("TSubjects")
                        .HasForeignKey("ThesisNo")
                        .HasConstraintName("FK__t_subject__thesi__0F624AF8");

                    b.Navigation("SubjectTopic");

                    b.Navigation("Thesis");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Author", b =>
                {
                    b.Navigation("Theses");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.CoSupervisor", b =>
                {
                    b.Navigation("Theses");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Institute", b =>
                {
                    b.Navigation("Theses");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.SubjectTopic", b =>
                {
                    b.Navigation("TSubjects");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Supervisor", b =>
                {
                    b.Navigation("Theses");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.Thesis", b =>
                {
                    b.Navigation("Keywords");

                    b.Navigation("TSubjects");
                });

            modelBuilder.Entity("DatabaseProject.Data.Models.University", b =>
                {
                    b.Navigation("Institutes");

                    b.Navigation("Theses");
                });
#pragma warning restore 612, 618
        }
    }
}
